
Code:
russ_test.c

cmd -> bash
now, 
> apt-get update
> sudo apt install gcc
> make (will see error message)
> sudo apt install make
> ls -al
> ls -al /dev/fuse
> sudo apt-get install libfuse-dev
> ls -al

download the Makefile and paste it in the directory (discord)

> cat Makefile
> make
> mkdir demo_dir
> ./russ_test -f -s demo_dir (forbidden error)

> mv demo_dir/ ~
> ./russ_test -f -s ~/demo_dir/
> ./russ_test -f -s ~/test/
Now code is running.

Open a new cmd -> bash -> 
> cd
> pwd
> ls -al
> ls -al demo_dir/ (go to that moved directory)
> cd demo_dir/
> ls -al
> cat dest
> cat link
> ls -al writable
> cat writable
> echo hello_world > writable
> ls -al writable
> cat writable
> ls -al sdfks
> man errno
> man 2 stat

Another way:
> 
> ./lfs image_file ~/test

> make
>./russ_test image_file ~/test

lfs: 
> gcc mklfs.c flash.c -o mklfs (create executable file with name mklfs)
> ./mklfs ~ (now run the executable file on base directory)
> hexdump -C image_file (see the image file)

> g++ hello.cpp -o hello (creates hello binary file)

The mount command mounts a storage device or filesystem, making it accessible and attaching it to an existing directory structure. 
The umount command "unmounts" a mounted filesystem, informing the system to complete any pending read or write operations, and safely detaching it.

The C programming language provides a keyword called typedef, which you can use to give a type a new name. 
typedef unsigned char BYTE; 

After this type definition, the identifier BYTE can be used as an abbreviation for the type unsigned char, for example..

BYTE  b1, b2;


fuse documentation link:
https://www.cs.hmc.edu/~geoff/classes/hmc.cs137.201801/homework/fuse/fuse_doc.html#readdir-details

I wrote this tool to allow me to more easily see what the Flash "disk" contained.  Try it out with 
	./dump_flash MY_IMAGE_FILE | hexdump -C | less 
and you can see what you've written to the disk.

> echo hi how are you? >> file1 
> mkdir dir1
> cd dir1
> cat file1 or 
> less file #display file content, q to quit


tutorial: Writing a Simple Filesystem Using FUSE in C

1. https://www.maastaar.net/fuse/linux/filesystem/c/2016/05/21/writing-a-simple-filesystem-using-fuse/
2. https://maastaar.net/fuse/linux/filesystem/c/2019/09/28/writing-less-simple-yet-stupid-filesystem-using-FUSE-in-C/

ASCII Table: 
https://www.rapidtables.com/code/text/ascii-table.html

Converter: 
https://www.rapidtables.com/convert/number/hex-to-decimal.html


# cp from .... to root directory where test is located

> cmd
> bash
> cd

> cp /mnt/c/Users/ual-laptop/Desktop/UofA/552\ OS/OS\ Project/552\ LFS\ Project/examine_directory .

// dot is there at the end

> umount test [if mount issues] [test is in ~ directory, so go there and then type this]

//sizeof(...) this is the size of whatever type it takes


check output on test dir:

> ls -1aR
> find . -type f | grep -v "/.lfs/" | sort | xargs cksum

> ls -al
> cat zwoatxgj

> strace cat abqlbmbn (on test1 dir)

To examine image files:

> gcc dump_flash.c flash.c -o dump_flash [create executable file]
> ./dump_flash LFS_DISK-100_files.img | hexdump -C 
> ./dump_flash LFS_DISK-100_files.img | hexdump -C | less

> cksum test1/fegjyuir (on root)
> strace ls (on test1)


Inside test1 dir on root:
> ../examine_directory > ../output_file 

from usual dir of folder:
> diff LFS_DISK-nestedDirs_and_symlinks.out ~/output_file


/mnt/c/Users/ual-laptop/Desktop/UofA/552 OS/OS Project/552 LFS Project


> ./lfs LFS_DISK-100_files.img ~/test1/

> file size: 28544
